class Query(graphene.ObjectType):
    all_customers = DjangoFilterConnectionField(CustomerNode, order_by=graphene.List(of_type=graphene.String))
    all_products = DjangoFilterConnectionField(ProductNode, order_by=graphene.List(of_type=graphene.String))
    all_orders = DjangoFilterConnectionField(OrderNode, order_by=graphene.List(of_type=graphene.String))

    def resolve_all_customers(self, info, order_by=None, **kwargs):
        qs = Customer.objects.all()
        if order_by:
            qs = qs.order_by(*order_by)
        return qs

    def resolve_all_products(self, info, order_by=None, **kwargs):
        qs = Product.objects.all()
        if order_by:
            qs = qs.order_by(*order_by)
        return qs

    def resolve_all_orders(self, info, order_by=None, **kwargs):
        qs = Order.objects.select_related('customer').prefetch_related('products').all()
        if order_by:
            qs = qs.order_by(*order_by)
        return qs
query {
  allCustomers(filter: {
    name: "Ali",
    createdAtGte: "2025-01-01",
    phonePattern: "+1"
  }, orderBy: ["-created_at"]) {
    edges {
      node {
        id
        name
        email
        createdAt
        phone
      }
    }
  }
}

query {
  allProducts(filter: {
    priceGte: 100,
    priceLte: 1000,
    lowStock: true
  }, orderBy: ["-stock"]) {
    edges {
      node {
        id
        name
        price
        stock
      }
    }
  }
}

query {
  allOrders(filter: {
    customerName: "Alice",
    productName: "Laptop",
    totalAmountGte: 500,
    productId: 2
  }, orderBy: ["-order_date"]) {
    edges {
      node {
        id
        customer {
          name
        }
        products {
          name
        }
        totalAmount
        orderDate
      }
    }
  }
}
